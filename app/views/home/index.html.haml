!!!
%html
  %head
    %title Climate change is already here.
  %body
    %a= link_to 'About', '/about'
    %h1 Climate change is already here.
    %p words words words
    = stylesheet_link_tag "home"

    %div
      %canvas#myChart

    %script{:src => "https://cdn.jsdelivr.net/npm/chart.js"}

    :javascript
      Chart.defaults.color = '#eeeeee';
      Chart.defaults.borderColor = '#eeeeee';
      Chart.defaults.font.family = "OpenSans-Medium";
      Chart.defaults.font.size = 12;

      const data = [];
      const data2 = [];
      let prev = 100;
      let prev2 = 80;
      for (let i = 0; i < 1000; i++) {
        prev += 5 - Math.random() * 10;
        data.push({x: i, y: prev});
        prev2 += 5 - Math.random() * 10;
        data2.push({x: i, y: prev2});
      }

      const totalDuration = 10000;
      const delayBetweenPoints = totalDuration / data.length;
      const previousY = (ctx) => ctx.index === 0 ? ctx.chart.scales.y.getPixelForValue(100) : ctx.chart.getDatasetMeta(ctx.datasetIndex).data[ctx.index - 1].getProps(['y'], true).y;

      var ctx = document.getElementById('myChart').getContext('2d');

      var myChart = new Chart(ctx, {
        type: 'line',
        data: {
          datasets: [{
            borderColor: 'rgba(255, 99, 132, 1)',
            backgroundColor: 'rgba(255, 99, 132, 0.2)',
            borderWidth: 1,
            radius: 0,
            data: data,
            yAxisID: 'y',
          },
          {
            borderColor: 'rgba(54, 162, 235, 1)',
            backgroundColor: 'rgba(54, 162, 235, 0.2)',
            borderWidth: 1,
            radius: 0,
            data: data2,
            yAxisID: 'y1',
          }]
        },
        options: {
          animation: {
            x: {
              type: 'number',
              easing: 'linear',
              duration: delayBetweenPoints,
              from: NaN, // the point is initially skipped
              delay(ctx) {
                if (ctx.type !== 'data' || ctx.xStarted) {
                  return 0;
                }
                ctx.xStarted = true;
                return ctx.index * delayBetweenPoints;
              }
            },
            y: {
              type: 'number',
              easing: 'linear',
              duration: delayBetweenPoints,
              from: previousY,
              delay(ctx) {
                if (ctx.type !== 'data' || ctx.yStarted) {
                  return 0;
                }
                ctx.yStarted = true;
                return ctx.index * delayBetweenPoints;
              }
            }
          },
          responsive: true,
          interaction: {
            mode: 'index',
            intersect: false
          },
          stacked: false,
          plugins: {
            legend: false
          },
          scales: {
            x: {
              type: 'linear',
              grid: {
                display: false,
              }
            },
            y: {
              type: 'linear',
              display: true,
              position: 'left',
              grid: {
                display: false,
              }
            },
            y1: {
              type: 'linear',
              display: true,
              position: 'right',
              // grid line settings
              grid: {
                drawOnChartArea: false, // only want the grid lines for one axis to show up
              }
            }
          }
        }
      });
